name: Build and Release Windows EXE

on:
  push:
    tags:
      - 'v*.*.*'   # e.g., v1.0.0, v1.2.3, etc.

permissions:
  contents: write 

jobs:
  build:
    name: Build Windows EXE
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build using Docker
        run: |
          # Example:
          # 1. Pull the public Docker image that can build Windows binaries.
          #    e.g., "docker pull myorg/mywindows-build-image:latest"
          docker pull tobix/pywine
          
          # 2. Run the Docker container, mounting the repository code and producing an exe.
          docker run -v .:/app -w /app tobix/pywine bash build.sh
          
          # After this finishes, you should have a built EXE in your repo workspace folder
          # e.g., at .\bin\my-app.exe
          zip -9 server.zip ./dist/server.exe
          mv server.zip dist/server.zip
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: mains-leaderboard
          path: dist/server.zip  # adjust if your exe is in a different location
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}   # The tag that triggered the workflow
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload EXE to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/server.zip
          asset_name: MainsLeaderboard.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
